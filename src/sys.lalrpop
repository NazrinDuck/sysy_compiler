use crate::ast::{CompUnit, Block, FuncDef, FuncType, Stmt, Exp, PrimaryExp, UnaryExp, UnaryOp, AddExp, AddOp, MulExp, MulOp};
//use crate::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[\s\S]*\*/" => {},
  // 剩下的情况采用默认方式处理
  _
}


//
//
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Exp: Exp = <add_exp: AddExp> => Exp { <> };

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new( <> )),
  <num: Number> => PrimaryExp::Number( <> ),
};

UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(Box::new( <> )),
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::Exp((unary_op, Box::new(unary_exp))),
};

MulExp: MulExp =  {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(Box::new( <> )),
  <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::Exp((Box::new(mul_exp), mul_op, Box::new(unary_exp))),
};

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(Box::new( <> )),
  <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::Exp((Box::new(add_exp), add_op, Box::new(mul_exp))),
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Positive,
  "-" => UnaryOp::Negative,
  "!" => UnaryOp::Not,
};

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
};

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
};

Number: i32 = <num: IntConst> => <>;
//
//


// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
