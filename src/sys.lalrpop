use crate::ast::{CompUnit, Block, FuncDef, FuncType, Stmt, Exp, PrimaryExp, UnaryExp, UnaryOp, AddExp, AddOp, MulExp, MulOp, RelExp, RelOp, EqExp, EqOp, LAndExp, LOrExp};
use crate::ast::{Decl, ConstDecl, BType, ConstDef, ConstInitVal, ConstExp, LVal, BlockItem, VarDecl, VarDef, InitVal};
//use crate::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[\s\S]*\*/" => {},
  // 剩下的情况采用默认方式处理
  _
}


//
//
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl( <> ),
  <var_decl: VarDecl> => Decl::VarDecl( <> ),
};

ConstDecl: ConstDecl = {
  "const" <b_type: BType> <mut const_defs: (<ConstDef> ",")*> <const_def: ConstDef?> ";" => match const_def {
    None => ConstDecl{ b_type, const_defs },
    Some(const_def) => {
      const_defs.push(const_def);
      ConstDecl{ b_type, const_defs }
    }
  }
};

BType: BType = "int" => BType::Int;

ConstDef: ConstDef = <ident: Ident> "=" <const_init_val: ConstInitVal> => {
  ConstDef {
    ident,
    const_init_val,
  }
};

ConstInitVal: ConstInitVal = <const_exp: ConstExp> => ConstInitVal { <> };

VarDecl: VarDecl = {
  <b_type: BType> <mut var_defs: (<VarDef> ",")*> <var_def: VarDef?> ";" => match var_def {
    None => VarDecl{ b_type, var_defs },
    Some(var_def) => {
      var_defs.push(var_def);
      VarDecl{ b_type, var_defs }
    }
  }
};

VarDef: VarDef = {
  <ident: Ident> => VarDef { ident, init_val: None },
  <ident: Ident> "=" <init_val: InitVal> => VarDef { ident, init_val: Some(init_val) },
};

InitVal: InitVal = <exp: Exp> => InitVal { <> };

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <block_items: BlockItem*> "}" => Block { <> };

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl( <> ),
  <stmt: Stmt> => BlockItem::Stmt( <> ),
};

Stmt: Stmt = {
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::SetLVal(lval, exp),
 "return" <exp: Exp> ";" => Stmt::Ret( <> ),
};

Exp: Exp = <lor_exp: LOrExp> => Exp { <> };

LVal: LVal = <ident: Ident> => LVal { <> };

PrimaryExp: PrimaryExp = {
  "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new( <> )),
  <lval: LVal> => PrimaryExp::LVal( <> ),
  <num: Number> => PrimaryExp::Number( <> ),
};

ConstExp: ConstExp = <exp: Exp> => ConstExp { <> };

UnaryExp: UnaryExp = {
  <primary_exp: PrimaryExp> => UnaryExp::PrimaryExp(Box::new( <> )),
  <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::Exp((unary_op, Box::new(unary_exp))),
};

MulExp: MulExp =  {
  <unary_exp: UnaryExp> => MulExp::UnaryExp(Box::new( <> )),
  <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::Exp((Box::new(mul_exp), mul_op, Box::new(unary_exp))),
};

AddExp: AddExp = {
  <mul_exp: MulExp> => AddExp::MulExp(Box::new( <> )),
  <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::Exp((Box::new(add_exp), add_op, Box::new(mul_exp))),
};

RelExp: RelExp = {
  <add_exp: AddExp> => RelExp::AddExp( <> ),
  <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::Exp((Box::new(rel_exp), rel_op, add_exp)),
}

EqExp: EqExp = {
  <rel_exp: RelExp> => EqExp::RelExp( <> ),
  <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::Exp((Box::new(eq_exp), eq_op, rel_exp)),
}

LAndExp: LAndExp = {
  <eq_exp: EqExp> => LAndExp::EqExp( <> ),
  <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::Exp((Box::new(land_exp), eq_exp)),
}

LOrExp: LOrExp = {
  <land_exp: LAndExp> => LOrExp::LAndExp( <> ),
  <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::Exp((Box::new(lor_exp), land_exp)),
}

RelOp: RelOp = {
  ">" => RelOp::Gt,
  "<" => RelOp::Lt,
  ">=" => RelOp::Ge,
  "<=" => RelOp::Le,
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::NotEq,
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Positive,
  "-" => UnaryOp::Negative,
  "!" => UnaryOp::Not,
};

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
};

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
};

Number: i32 = <num: IntConst> => <>;
//
//


// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
